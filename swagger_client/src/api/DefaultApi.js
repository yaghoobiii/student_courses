/*
 * student-courses
 * The API for the Maryam's homework
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Course} from '../model/Course';
import {Selection} from '../model/Selection';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the courseById operation.
     * @callback moduleapi/DefaultApi~courseByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Course{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific course by ID
     * @param {Number} courseId 
     * @param {module:api/DefaultApi~courseByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    courseById(courseId, callback) {
      
      let postBody = null;
      // verify the required parameter 'courseId' is set
      if (courseId === undefined || courseId === null) {
        throw new Error("Missing the required parameter 'courseId' when calling courseById");
      }

      let pathParams = {
        'course_id': courseId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Course;

      return this.apiClient.callApi(
        '/courses/{course_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the destroySelection operation.
     * @callback moduleapi/DefaultApi~destroySelectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Destroy a selection
     * @param {Number} student 
     * @param {Number} course 
     * @param {module:api/DefaultApi~destroySelectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    destroySelection(student, course, callback) {
      
      let postBody = null;
      // verify the required parameter 'student' is set
      if (student === undefined || student === null) {
        throw new Error("Missing the required parameter 'student' when calling destroySelection");
      }
      // verify the required parameter 'course' is set
      if (course === undefined || course === null) {
        throw new Error("Missing the required parameter 'course' when calling destroySelection");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'student': student,'course': course
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/selections/destroy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the insertSelection operation.
     * @callback moduleapi/DefaultApi~insertSelectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a selection
     * @param {Number} student 
     * @param {Number} course 
     * @param {module:api/DefaultApi~insertSelectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    insertSelection(student, course, callback) {
      
      let postBody = null;
      // verify the required parameter 'student' is set
      if (student === undefined || student === null) {
        throw new Error("Missing the required parameter 'student' when calling insertSelection");
      }
      // verify the required parameter 'course' is set
      if (course === undefined || course === null) {
        throw new Error("Missing the required parameter 'course' when calling insertSelection");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'student': student,'course': course
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/selections/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the selectionByStudent operation.
     * @callback moduleapi/DefaultApi~selectionByStudentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Selection{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a student&#x27;s selections
     * @param {Number} studentId 
     * @param {module:api/DefaultApi~selectionByStudentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    selectionByStudent(studentId, callback) {
      
      let postBody = null;
      // verify the required parameter 'studentId' is set
      if (studentId === undefined || studentId === null) {
        throw new Error("Missing the required parameter 'studentId' when calling selectionByStudent");
      }

      let pathParams = {
        'student_id': studentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Selection;

      return this.apiClient.callApi(
        '/selections/{student_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}